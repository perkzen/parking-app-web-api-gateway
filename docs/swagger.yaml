definitions:
  handlers.LoginDTO:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  payments.GetAllPaymentsResponse:
    properties:
      payments:
        items:
          $ref: '#/definitions/payments.GetPaymentResponse'
        type: array
    type: object
  payments.GetPaymentResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user:
        type: string
    type: object
  payments.UpdatePaymentRequest:
    properties:
      id:
        type: string
      status:
        type: string
    type: object
  services.CreateParkingSpotRequest:
    properties:
      location:
        type: string
      name:
        type: string
    type: object
  services.ParkingSpot:
    properties:
      car:
        type: string
      location:
        type: string
      name:
        type: string
      occupied:
        type: boolean
      occupiedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login DTO
        in: body
        name: loginDTO
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /park:
    get:
      description: Get parking spots
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.ParkingSpot'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get parking spots
      tags:
      - parking
    post:
      consumes:
      - application/json
      description: Create parking spot
      parameters:
      - description: Create parking spot request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateParkingSpotRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.ParkingSpot'
      security:
      - ApiKeyAuth: []
      summary: Create parking spot
      tags:
      - parking
  /park/{name}:
    get:
      description: Get parking spot
      parameters:
      - description: Parking spot name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.ParkingSpot'
      security:
      - ApiKeyAuth: []
      summary: Get parking spot
      tags:
      - parking
  /payments:
    get:
      description: Get all payments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/payments.GetAllPaymentsResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all payments
      tags:
      - payments
  /payments/{id}:
    put:
      consumes:
      - application/json
      description: Update a payment
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/payments.UpdatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a payment
      tags:
      - payments
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
