// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/payments.proto

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentsGrpc_GetPayment_FullMethodName     = "/payments.PaymentsGrpc/GetPayment"
	PaymentsGrpc_CreatePayment_FullMethodName  = "/payments.PaymentsGrpc/CreatePayment"
	PaymentsGrpc_GetAllPayments_FullMethodName = "/payments.PaymentsGrpc/GetAllPayments"
	PaymentsGrpc_UpdatePayment_FullMethodName  = "/payments.PaymentsGrpc/UpdatePayment"
)

// PaymentsGrpcClient is the client API for PaymentsGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentsGrpcClient interface {
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	GetAllPayments(ctx context.Context, in *GetAllPaymentsRequest, opts ...grpc.CallOption) (*GetAllPaymentsResponse, error)
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error)
}

type paymentsGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsGrpcClient(cc grpc.ClientConnInterface) PaymentsGrpcClient {
	return &paymentsGrpcClient{cc}
}

func (c *paymentsGrpcClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentsGrpc_GetPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsGrpcClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentsGrpc_CreatePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsGrpcClient) GetAllPayments(ctx context.Context, in *GetAllPaymentsRequest, opts ...grpc.CallOption) (*GetAllPaymentsResponse, error) {
	out := new(GetAllPaymentsResponse)
	err := c.cc.Invoke(ctx, PaymentsGrpc_GetAllPayments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsGrpcClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error) {
	out := new(UpdatePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentsGrpc_UpdatePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentsGrpcServer is the server API for PaymentsGrpc service.
// All implementations must embed UnimplementedPaymentsGrpcServer
// for forward compatibility
type PaymentsGrpcServer interface {
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	GetAllPayments(context.Context, *GetAllPaymentsRequest) (*GetAllPaymentsResponse, error)
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error)
	mustEmbedUnimplementedPaymentsGrpcServer()
}

// UnimplementedPaymentsGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentsGrpcServer struct {
}

func (UnimplementedPaymentsGrpcServer) GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentsGrpcServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentsGrpcServer) GetAllPayments(context.Context, *GetAllPaymentsRequest) (*GetAllPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPayments not implemented")
}
func (UnimplementedPaymentsGrpcServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedPaymentsGrpcServer) mustEmbedUnimplementedPaymentsGrpcServer() {}

// UnsafePaymentsGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsGrpcServer will
// result in compilation errors.
type UnsafePaymentsGrpcServer interface {
	mustEmbedUnimplementedPaymentsGrpcServer()
}

func RegisterPaymentsGrpcServer(s grpc.ServiceRegistrar, srv PaymentsGrpcServer) {
	s.RegisterService(&PaymentsGrpc_ServiceDesc, srv)
}

func _PaymentsGrpc_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsGrpcServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsGrpc_GetPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsGrpcServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsGrpc_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsGrpcServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsGrpc_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsGrpcServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsGrpc_GetAllPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsGrpcServer).GetAllPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsGrpc_GetAllPayments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsGrpcServer).GetAllPayments(ctx, req.(*GetAllPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsGrpc_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsGrpcServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentsGrpc_UpdatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsGrpcServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentsGrpc_ServiceDesc is the grpc.ServiceDesc for PaymentsGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentsGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payments.PaymentsGrpc",
	HandlerType: (*PaymentsGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayment",
			Handler:    _PaymentsGrpc_GetPayment_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentsGrpc_CreatePayment_Handler,
		},
		{
			MethodName: "GetAllPayments",
			Handler:    _PaymentsGrpc_GetAllPayments_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _PaymentsGrpc_UpdatePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/payments.proto",
}
